{
	"info": {
		"_postman_id": "44898162-8d291500-d2af-42fb-ab37-194dd4972788",
		"name": "RedCV Auth API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12297972"
	},
	"item": [
		{
			"name": "[Mandatory] Register User with Complete Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 201', () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('response header Content-Type should be application/json', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.haveOwnProperty('status');",
							"    pm.expect(responseJson).to.haveOwnProperty('message');",
							"    pm.expect(responseJson).to.haveOwnProperty('data');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson.message).to.equals('User berhasil ditambahkan');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"",
							"pm.test('response body data should contain userId', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							"    pm.expect(data).to.haveOwnProperty('userId');",
							"    pm.expect(data.userId).to.not.equals('');",
							"    pm.environment.set('userId', data.userId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{newUsername}}\",\n    \"email\": \"{{newEmail}}\",\n    \"password\": \"{{newPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Login User with Correct Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response header Content-Type should be application/json', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.haveOwnProperty('status');",
							"    pm.expect(responseJson).to.haveOwnProperty('message');",
							"    pm.expect(responseJson).to.haveOwnProperty('data');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson.message).to.equals('Login berhasil');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"",
							"pm.test('response body data should contain token', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							"    pm.expect(data).to.haveOwnProperty('token');",
							"    pm.expect(data.token).to.not.equals('');",
							"    pm.environment.set('authToken', data.token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{newEmail}}\",\n    \"password\": \"{{newPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Get Authenticated User Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response header Content-Type should be application/json', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.haveOwnProperty('status');",
							"    pm.expect(responseJson).to.haveOwnProperty('data');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"",
							"pm.test('response body data should contain user object', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							"    pm.expect(data).to.haveOwnProperty('user');",
							"    pm.expect(data.user).to.be.an('object');",
							"});",
							"",
							"pm.test('user object should contain correct properties', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data: { user } } = responseJson;",
							"    pm.expect(user).to.haveOwnProperty('id');",
							"    pm.expect(user).to.haveOwnProperty('username');",
							"    pm.expect(user).to.haveOwnProperty('email');",
							"    pm.expect(user.id).to.equals(pm.environment.get('userId'));",
							"    pm.expect(user.username).to.equals(pm.environment.get('newUsername'));",
							"    pm.expect(user.email).to.equals(pm.environment.get('newEmail'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:{{port}}/auth/me",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Get Authenticated User Info with Invalid Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 401ammo",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test('response header Content-Type should be application/json', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.haveOwnProperty('status');",
							"    pm.expect(responseJson).to.haveOwnProperty('message');",
							"    pm.expect(responseJson.status).to.equals('fail');",
							"    pm.expect(responseJson.message).to.equals('Token tidak valid');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer invalid_token",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:{{port}}/auth/me",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"me"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [""]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [""]
			}
		}
	]
}